# This Cloudformation stack template was generated by
# https://github.com/caktus/aws-web-stacks
# at 2020-03-04 14:28:54.446762
# with parameters:
#	USE_EKS = on

Conditions:
  CmkArnCondition: !Not
    - !Equals
      - !Ref 'CustomerManagedCmkArn'
      - ''
  InGovCloudRegion: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
  UseAES256EncryptionCond: !Equals
    - !Ref 'UseAES256Encryption'
    - 'true'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Global
        Parameters:
          - PrimaryAZ
          - SecondaryAZ
          - VpcCidr
          - PublicSubnetACidr
          - PublicSubnetBCidr
          - PrivateSubnetACidr
          - PrivateSubnetBCidr
          - UseAES256Encryption
          - CustomerManagedCmkArn
      - Label:
          default: Application Server
        Parameters:
          - AdministratorIPAddress
          - DesiredScale
          - MaxScale
          - ContainerVolumeSize
          - ContainerInstanceType
    ParameterLabels:
      AdministratorIPAddress:
        default: Admin IP Address
      ContainerInstanceType:
        default: Instance Type
      ContainerVolumeSize:
        default: Root Volume Size
      CustomerManagedCmkArn:
        default: Customer managed key ARN
      DesiredScale:
        default: Desired Instance Count
      MaxScale:
        default: Maximum Instance Count
      PrimaryAZ:
        default: Primary Availability Zone
      PrivateSubnetACidr:
        default: Private Subnet A CIDR Block
      PrivateSubnetBCidr:
        default: Private Subnet B CIDR Block
      PublicSubnetACidr:
        default: Public Subnet A CIDR Block
      PublicSubnetBCidr:
        default: Public Subnet B CIDR Block
      SecondaryAZ:
        default: Secondary Availability Zone
      UseAES256Encryption:
        default: Enable Encryption
      VpcCidr:
        default: VPC IPv4 CIDR Block
Outputs:
  ClusterEndpoint:
    Description: The connection endpoint for the cluster API.
    Value: !GetAtt 'EksCluster.Endpoint'
  RepositoryURL:
    Description: The docker repository URL
    Value: !Join
      - ''
      - - !Ref 'AWS::AccountId'
        - .dkr.ecr.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
        - !Ref 'ApplicationRepository'
Parameters:
  AdministratorIPAddress:
    Default: 192.0.2.0/24
    Description: The IP address allowed to access containers. Defaults to TEST-NET-1
      (ie, no valid IP)
    Type: String
  ContainerInstanceType:
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.12xlarge
      - m5d.24xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.18xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - g2.2xlarge
      - g2.8xlarge
      - x1.16large
      - x1.32xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16large
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - f1.2xlarge
      - f1.16xlarge
    Default: t2.micro
    Description: The application server instance type
    Type: String
  ContainerVolumeSize:
    Default: '20'
    Description: Size of instance EBS root volume (in GB)
    Type: Number
  CustomerManagedCmkArn:
    Default: ''
    Description: KMS CMK ARN to encrypt stack resources (except for public buckets).
    Type: String
  DesiredScale:
    Default: '2'
    Description: Desired container instances count
    Type: Number
  MaxScale:
    Default: '4'
    Description: Maximum container instances count
    Type: Number
  PrimaryAZ:
    Description: The primary availability zone for creating resources.
    Type: AWS::EC2::AvailabilityZone::Name
  PrivateSubnetACidr:
    AllowedPattern: >-
      ^((10\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)|(172\.(1[6-9]|2[0-9]|3[0-1])\.)|192\.168\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: Must be a private IPv4 range with size /16 and /28.
    Default: 10.0.8.0/22
    Description: IPv4 CIDR block for the private subnet in the primary AZ. [Possibly
      not modifiable after stack creation]
    Type: String
  PrivateSubnetBCidr:
    AllowedPattern: >-
      ^((10\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)|(172\.(1[6-9]|2[0-9]|3[0-1])\.)|192\.168\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: Must be a private IPv4 range with size /16 and /28.
    Default: 10.0.12.0/22
    Description: IPv4 CIDR block for the private subnet in the secondary AZ. [Possibly
      not modifiable after stack creation]
    Type: String
  PublicSubnetACidr:
    AllowedPattern: >-
      ^((10\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)|(172\.(1[6-9]|2[0-9]|3[0-1])\.)|192\.168\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: Must be a private IPv4 range with size /16 and /28.
    Default: 10.0.0.0/22
    Description: IPv4 CIDR block for the public subnet in the primary AZ. [Possibly
      not modifiable after stack creation]
    Type: String
  PublicSubnetBCidr:
    AllowedPattern: >-
      ^((10\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)|(172\.(1[6-9]|2[0-9]|3[0-1])\.)|192\.168\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: Must be a private IPv4 range with size /16 and /28.
    Default: 10.0.4.0/22
    Description: IPv4 CIDR block for the public subnet in the secondary AZ. [Possibly
      not modifiable after stack creation]
    Type: String
  SecondaryAZ:
    Description: The secondary availability zone for creating resources. Must differ
      from primary zone.
    Type: AWS::EC2::AvailabilityZone::Name
  UseAES256Encryption:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Whether or not to use server side encryption for S3, EBS, and RDS.
      When true, encryption is enabled for all resources.
    Type: String
  VpcCidr:
    AllowedPattern: >-
      ^((10\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)|(172\.(1[6-9]|2[0-9]|3[0-1])\.)|192\.168\.)(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: Must be a private IPv4 range with size /16 and /28.
    Default: 10.0.0.0/20
    Description: The primary IPv4 CIDR block for the VPC. [Possibly not modifiable
      after stack creation]
    Type: String
Resources:
  ApplicationRepository:
    Properties:
      RepositoryName: !Ref 'AWS::StackName'
      RepositoryPolicyText:
        Statement:
          - Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
            Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - !If
                      - InGovCloudRegion
                      - arn:aws-us-gov
                      - arn:aws
                    - ':iam::'
                    - !Ref 'AWS::AccountId'
                    - :root
            Sid: AllowPushPull
        Version: '2008-10-17'
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
    Type: AWS::ECR::Repository
  ContainerInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref 'ContainerInstanceRole'
    Type: AWS::IAM::InstanceProfile
  ContainerInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Path: /
      Policies: []
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
    Type: AWS::IAM::Role
  EksCluster:
    Properties:
      Name: !Sub '${AWS::StackName}-cluster'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref 'EksClusterSecurityGroup'
        SubnetIds:
          - !Ref 'PublicSubnetA'
          - !Ref 'PublicSubnetB'
          - !Ref 'PrivateSubnetA'
          - !Ref 'PrivateSubnetB'
      RoleArn: !GetAtt 'EksServiceRole.Arn'
    Type: AWS::EKS::Cluster
  EksClusterSecurityGroup:
    Properties:
      GroupDescription: EKS control plane security group.
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - eks-cluster
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::SecurityGroup
  EksServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      Path: /
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
    Type: AWS::IAM::Role
  GatewayAttachement:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::VPCGatewayAttachment
  InternetGateway:
    Properties:
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - igw
    Type: AWS::EC2::InternetGateway
  Nodegroup:
    DependsOn:
      - EksCluster
    Properties:
      ClusterName: !Ref 'EksCluster'
      DiskSize: !Ref 'ContainerVolumeSize'
      InstanceTypes:
        - !Ref 'ContainerInstanceType'
      NodeRole: !GetAtt 'ContainerInstanceRole.Arn'
      ScalingConfig:
        DesiredSize: !Ref 'DesiredScale'
        MaxSize: !Ref 'MaxScale'
        MinSize: 2
      Subnets:
        - !Ref 'PrivateSubnetA'
        - !Ref 'PrivateSubnetB'
      Tags:
        Key: Value
    Type: AWS::EKS::Nodegroup
  PrivateSubnetA:
    Properties:
      AvailabilityZone: !Ref 'PrimaryAZ'
      CidrBlock: !Ref 'PrivateSubnetACidr'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - private-a
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::Subnet
  PrivateSubnetARouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PrivateSubnetA'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetB:
    Properties:
      AvailabilityZone: !Ref 'SecondaryAZ'
      CidrBlock: !Ref 'PrivateSubnetBCidr'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - private-b
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::Subnet
  PrivateSubnetBRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PrivateSubnetB'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicRoute:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - public
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::RouteTable
  PublicSubnetA:
    Properties:
      AvailabilityZone: !Ref 'PrimaryAZ'
      CidrBlock: !Ref 'PublicSubnetACidr'
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - public-a
        - Key: kubernetes.io/role/elb
          Value: '1'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::Subnet
  PublicSubnetARouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnetA'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnetB:
    Properties:
      AvailabilityZone: !Ref 'SecondaryAZ'
      CidrBlock: !Ref 'PublicSubnetBCidr'
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - public-b
        - Key: kubernetes.io/role/elb
          Value: '1'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::Subnet
  PublicSubnetBRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnetB'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Vpc:
    Properties:
      CidrBlock: !Ref 'VpcCidr'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: aws-web-stacks:stack-name
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - vpc
    Type: AWS::EC2::VPC

